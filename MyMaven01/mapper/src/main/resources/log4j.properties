#src统计创建并设置log4j.properties
#参考链接：https://www.cnblogs.com/30go/p/7200739.html


#Log4j由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式。
# level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别.
# 日志信息的优先级从高到低有ERROR、WARN、 INFO、DEBUG，分别用来指定这条日志信息的重要程度；
#
#日志级别
#每个Logger都被了一个日志级别（log level），用来控制日志信息的输出。日志级别从高到低分为：
#A：off 最高等级，用于关闭所有日志记录。
#B：fatal 指出每个严重的错误事件将会导致应用程序的退出。
#C：error 指出虽然发生错误事件，但仍然不影响系统的继续运行。
#D：warm 表明会出现潜在的错误情形。
#E：info 一般和在粗粒度级别上，强调应用程序的运行全程。
#F：debug 一般用于细粒度级别上，对调试应用程序非常有帮助。
#G：all 最低等级，用于打开所有日志记录。

# 日志信息的输出目的地指定了日志将打印到控制台还是文件中；
# 输出格式则控制了日志信息的显示内容。
#配置根Logger;
# 语法：log4j.rootLogger = [level] , appenderName, appenderName, …
#log4j.rootLogger = debug,stdout,fileAppendar,dailyRollingFileAppender,writerAppender


#设置日志信息的输入目的地：输出信息到控制台；
# 【可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的时间记录器、UNIX Syslog守护进程】

#配置日志信息输出目的地Appender
#1、ConsoleAppender 在控制台输出
#2、FileAppender     在输出到文件中
#3、DailyRollingFileAppender     每天产生一个日志文件
#4、RollingFileAppender          文件大小到达指定尺寸的时候产生一个新的文件
#5、WriterAppender               将日志信息以流格式发送到任意指定的地方

#配置日志信息布局layout
#1、HTMLLayout   以HTML表格形式布局
#2、PatternLayout    可以灵活地指定布局模式
#3、SimpleLayout     包含日志信息的级别和信息字符串
#4、TTCCLayout       包含日志产生的时间、线程、类别等等信息

#配置布局的格式
# %p 输出日志信息的优先级，即DEBUG、INFO、WARN、ERROR
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出所产生该日志时间的线程名
# %n 输出一个回车换行符，Rindow平台为rn，unix平台为n
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
# %l 输出日志时间的发生位置，包括类目名、发生的线程、以及在代码中的行数


#配置根Logger;
# 语法：log4j.rootLogger = [level] , appenderName, appenderName, …
log4j.rootLogger = debug,stdout,fileAppender,dailyRollingFileAppender


########################################################
#一、在控制台输出Debug级别的日志
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#输出格式模板  [INFO ] 2018-11-17 23:13:30,874 method:com.dandan.logTest.main(logTest.java:16)
#              this is info message
log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%1%n%m%n



#########################################################
#二、将日志输出到一整个文件中
log4j.appender.fileAppender=org.apache.log4j.FileAppender
#设置日志文件的输出路径
log4j.appender.fileAppender.File = F://logs/log.log
#以追加的方式输出到文件中，false以覆盖的方式输出到文件中
log4j.appender.fileAppender.Append = true
#输入Debug级别的日志到文件
log4j.appender.fileAppender.Threshold = DEBUG
#配置日志信息的布局
log4j.appender.fileAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.fileAppender.layout.ConversionPattern= %-d{yyyy-MM-dd HH:mm:ss} {%t:%r} - [%p] %m%n



##################################################
#三、将每天的Debug级别的日志输出到一个日志文件
log4j.appender.dailyRollingFileAppender=org.apache.log4j.DailyRollingFileAppender
log4j.appender.dailyRollingFileAppender.File=F://logs/error.log
log4j.appender.dailyRollingFileAppender.Append=true
log4j.appender.dailyRollingFileAppender.threshold=ERROR
log4j.appender.dailyRollingFileAppender.layout=org.apache.log4j.PatternLayout
#日志信息的输入模板格式
# 【%d{yyyy-MM-dd HH:mm:ss} 输出日志时间点的日期和时间   年月日 时分秒
#   [%t产生该日志的线程名：%r输出自应用启动到输出该log信息耗费的毫秒数]
#   [%p 输出日志信息优先级]
#   [%m%n %m输出代码中指定的消息，产生的日志具体信息  %n回车换行符]】
#打印结果【2018-11-17 [main:2] -[ERROR] this is error message 】
log4j.appender.dailyRollingFileAppender.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%t:%r] -[%p] %m%n



























